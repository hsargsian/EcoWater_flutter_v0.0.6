name: 📦🚀 Build & deploy iOS app for an environment

on:
  workflow_call:
    inputs:
      environment-name:
        required: true
        type: string
      environment-url:
        required: true
        type: string
      short-environment-name:
        required: true
        type: string
      flavor:
        required: true
        type: string

jobs:
  deployIos:
    name: 🍏📦🚀 Build & deploy iOS ${{ inputs.short-environment-name }} release
    runs-on: macos-latest
    environment:
      name: ${{ inputs.environment-name }}
      url: ${{ inputs.environment-url }}
    outputs:
      message: "${{ steps.endMessage.outputs.message }}"
    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.3"
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3
      - name: Choose Provisioning Profile
        id: choose-profile
        run: |
          case "${{ inputs.flavor }}" in
            dev)
              echo "PROVISIONING_PROFILE_BASE64=${{ secrets.IOS_DEV_DISTRIBUTION_PROVISIONING_PROFILE_BASE64 }}" >> $GITHUB_ENV
              ;;
            uat)
              echo "PROVISIONING_PROFILE_BASE64=${{ secrets.IOS_UAT_DISTRIBUTION_PROVISIONING_PROFILE_BASE64 }}" >> $GITHUB_ENV
              ;;
            prod)
              echo "PROVISIONING_PROFILE_BASE64=${{ secrets.IOS_APP_STORE_DISTRIBUTION_PROVISIONING_PROFILE_BASE64 }}" >> $GITHUB_ENV
              ;;
            *)
              echo "Invalid flavor specified."
              exit 1
              ;;
          esac
      - name: Choose Export Option
        id: choose-export-option
        run: |
          case "${{ inputs.flavor }}" in
            dev)
              echo "EXPORT_OPTION_BASE64=${{ secrets.IOS_DEV_EXPORT_OPTIONS_BASE64 }}" >> $GITHUB_ENV
              ;;
            uat)
              echo "EXPORT_OPTION_BASE64=${{ secrets.IOS_UAT_EXPORT_OPTIONS_BASE64 }}" >> $GITHUB_ENV
              ;;
            prod)
              echo "EXPORT_OPTION_BASE64=${{ secrets.IOS_PROD_EXPORT_OPTIONS_BASE64 }}" >> $GITHUB_ENV
              ;;
            *)
              echo "Invalid flavor specified."
              exit 1
              ;;
          esac
      - name: 🔐 Install Apple certificate and provisioning profile
        env:
          P12_DISTRIBUTION_CERTIFICATE_BASE64: "${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_BASE64 }}"
          P12_DISTRIBUTION_CERTIFICATE_PASSWORD: "${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_PASSWORD }}"
          DISTRIBUTION_PROVISIONING_PROFILE_BASE64: "${{ env.PROVISIONING_PROFILE_BASE64 }}"
          KEYCHAIN_PASSWORD: "${{ secrets.IOS_RUNNER_LOCAL_KEYCHAIN_PASSWORD }}"
          EXPORT_OPTIONS_BASE64: "${{ env.EXPORT_OPTION_BASE64 }}"
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/build_app.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          EXPORT_OPTIONS_PATH="${{ github.workspace }}/ios/Runner/ExportOptions.plist"

          # import certificate, provisioning profile and export options from secrets
          echo -n "$P12_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$DISTRIBUTION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PROVISIONING_PROFILE_PATH
          echo -n "$EXPORT_OPTIONS_BASE64" | base64 --decode -o $EXPORT_OPTIONS_PATH

          echo "$EXPORT_OPTIONS_BASE64" | base64 --decode | less
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: 🔐 Add environment values
        env:
          DEV_ENV_BASE64: "${{ secrets.DEV_ENV_BASE64 }}"
          UAT_ENV_BASE64: "${{ secrets.UAT_ENV_BASE64 }}"
          PROD_ENV_BASE64: "${{ secrets.PROD_ENV_BASE64 }}"
        run: |
          # create variables
          DEV_ENV_PATH="${{ github.workspace }}/.dev.env"
          UAT_ENV_PATH="${{ github.workspace }}/.uat.env"
          PROD_ENV_PATH="${{ github.workspace }}/.prod.env"

          echo -n "$DEV_ENV_BASE64" | base64 --decode -o $DEV_ENV_PATH
          echo -n "$UAT_ENV_BASE64" | base64 --decode -o $UAT_ENV_PATH
          echo -n "$PROD_ENV_BASE64" | base64 --decode -o $PROD_ENV_PATH

      - name: ⚙️ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.1"
          channel: "stable"
          cache: true
        id: flutter
      - name: Install Flutterfire
        run: |
          dart pub global activate flutterfire_cli
      - name: 🍏📦 Create iOS ${{ inputs.short-environment-name }} ipa release
        run: |
          flutter build ipa \
            --release \
            --flavor ${{ inputs.flavor }} \
            --target lib/main_${{ inputs.flavor }}.dart \
            --export-options-plist=ios/Runner/ExportOptions.plist
      - name: 🍏🚀 Deploy to App Store (Testflight)
        uses: apple-actions/upload-testflight-build@v1
        id: deploy_app
        with:
          app-path: ${{ github.workspace }}/build/ios/ipa/EchoWater.ipa
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}
      - name: 💬 set  output message
        id: endMessage
        env:
          ECHOWATER_POWER_AUTOMATE_URL: "${{ secrets.ECHOWATER_POWER_AUTOMATE_URL }}"
        run: |
          REPO_URL="https://github.com/${GITHUB_REPOSITORY}"
          if [[ "${{ steps.deploy_app.outcome }}" == 'success' ]]; then
            echo "message=New ios build has been pushed to testflight for testing" >> "$GITHUB_OUTPUT"
            curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"title":"${{ inputs.flavor }} build deployed successfully", "message":"The Echo Water ${{ inputs.flavor }} build deployment succeeded.", "platform": "ios", "is_success": true, "github_url":"'$REPO_URL'"}' \
            "$ECHOWATER_POWER_AUTOMATE_URL"
          else
            echo "message=Error in cd pipeline. Please check the logs" >> "$GITHUB_OUTPUT"
            curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"title":"${{ inputs.flavor }} build deployment failed", "message":"The Echo Water ${{ inputs.flavor }} build deployment failed. Please check github actions for further information", "platform": "ios", "is_success": false, "github_url":"'$REPO_URL'"}' \
            "$ECHOWATER_POWER_AUTOMATE_URL"
          fi
